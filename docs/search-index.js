crystal_doc_search_index_callback({"repository_name":"rate_limiter","body":"![GitHub release](https://img.shields.io/github/release/lbarasti/rate_limiter.svg)\n![Build Status](https://github.com/lbarasti/rate_limiter/workflows/Crystal%20spec/badge.svg)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n# rate_limiter\n\nThis shard provides a Crystal implementation of the [token bucket](https://en.wikipedia.org/wiki/Token_bucket) algorithm for rate limiting. You can check out the API documentation [here](https://lbarasti.com/rate_limiter/).\n\n## Installation\n\n1 - Add the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  rate_limiter:\n    github: lbarasti/rate_limiter\n```\n\n2 - Run `shards install`\n\n## Usage\n\nRemember to import the shard at the top of your file.\n```crystal\nrequire \"rate_limiter\"\n```\n\nNow you can initialise a rate limiter that produces 1 token every few seconds\n```crystal\nrl = RateLimiter.new(interval: 3.seconds)\n```\n\nMind that the first call to `#get` will return immediately, as buckets are initialised with 1 token, by default.\n```crystal\nrl.get # => #<RateLimiter::Token:0x7f9c55458f00 @created_at=...>\n```\n\nThe next call to `#get` will block for approx. 3 seconds\n```crystal\nstart_time = Time.utc\nrl.get\nTime.utc - start_time # => 00:00:03.000426843\n```\n\nWe can also provide a `max_wait` parameter to `#get`.\n```crystal\nrl.get(0.5.seconds)\n```\nThis call will block for at most 0.5 seconds. If a token is not returned within that interval, then a `RateLimiter::Timeout` is returned.\n\nRate limiters also expose non-blocking methods.\n```crystal\nrl.get? # returns `nil` if no token is available\n\nrl.get! # raises a RateLimiter::Timeout exception if no token is available\n```\n\nYou can pass `#get!` a `max_wait` parameter.\n```crystal\nrl.get!(1.second)\n```\nThis will raise a `RateLimiter::Timeout` exception if no token is returned within a 1 second interval.\n\n### Burst size\nYou can define a rate limiter that accumulates unused tokens up to the specified value by providing a `max_burst` parameter to `RateLimiter.new` - the default is 1.\n```crystal\nRateLimiter.new(rate: 0.5, max_burst: 10)\n```\nThis will generate 1 token every 2 seconds and store up to 10 unused tokens for later use. See Wikipedia's [Burst size](https://en.wikipedia.org/wiki/Token_bucket#Burst_size) for more details.\n\n## Under the hood\n![](./media/diagram_1.png)\n\n## Why do I need a rate limiter?\n* We're calling an API that throttles us when we\n  call it too frequently, and we'd rather avoid that.\n* We are exposing an API to customers and want to\n  ensure we don't get flooded with requests. For example, we might want to rate limit calls by client id, so that one misbehaving client will not affect the others.\n* One of our ETL stages talks to a datastore that limits the number of requests per second we can send.\n* We have to run a database migration in production and we don't\n  want to affect the responsiveness of the service.\n\n## Development\n\nRun the following to run the tests.\n```\ncrystal spec\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/lbarasti/rate_limiter/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [lbarasti](https://github.com/lbarasti) - creator and maintainer\n","program":{"html_id":"rate_limiter/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"rate_limiter","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"rate_limiter/RateLimiter","path":"RateLimiter.html","kind":"module","full_name":"RateLimiter","name":"RateLimiter","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"rate_limiter","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.0.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Rate limiting functionality.","summary":"<p>Rate limiting functionality.</p>","class_methods":[],"constructors":[{"id":"new(rate:Float64,max_burst:Int32=1)-class-method","html_id":"new(rate:Float64,max_burst:Int32=1)-class-method","name":"new","doc":"Creates a new `Limiter`.\n`rate`: the rate of tokens being produced in tokens/second.\n`max_burst`: maximum number of tokens that can be stored in the bucket.","summary":"<p>Creates a new <code><a href=\"RateLimiter/Limiter.html\">Limiter</a></code>.</p>","abstract":false,"args":[{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"Float64"},{"name":"max_burst","doc":null,"default_value":"1","external_name":"max_burst","restriction":"Int32"}],"args_string":"(rate : Float64, max_burst : Int32 = <span class=\"n\">1</span>)","source_link":null,"def":{"name":"new","args":[{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"Float64"},{"name":"max_burst","doc":null,"default_value":"1","external_name":"max_burst","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Limiter.new(rate, max_burst)"}},{"id":"new(interval:Time::Span,max_burst:Int32=1)-class-method","html_id":"new(interval:Time::Span,max_burst:Int32=1)-class-method","name":"new","doc":"Creates a new `Limiter`.\n`interval`: the interval at which new tokens are generated.\n`max_burst`: maximum number of tokens that can be stored in the bucket.","summary":"<p>Creates a new <code><a href=\"RateLimiter/Limiter.html\">Limiter</a></code>.</p>","abstract":false,"args":[{"name":"interval","doc":null,"default_value":"","external_name":"interval","restriction":"Time::Span"},{"name":"max_burst","doc":null,"default_value":"1","external_name":"max_burst","restriction":"Int32"}],"args_string":"(interval : Time::Span, max_burst : Int32 = <span class=\"n\">1</span>)","source_link":null,"def":{"name":"new","args":[{"name":"interval","doc":null,"default_value":"","external_name":"interval","restriction":"Time::Span"},{"name":"max_burst","doc":null,"default_value":"1","external_name":"max_burst","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"rate = 1 / interval.total_seconds\nLimiter.new(rate, max_burst)\n"}},{"id":"new(*limiters:Limiter)-class-method","html_id":"new(*limiters:Limiter)-class-method","name":"new","doc":"Creates a `MultiLimiter`.\n`limiters`: a set of rate limiters.","summary":"<p>Creates a <code><a href=\"RateLimiter/MultiLimiter.html\">MultiLimiter</a></code>.</p>","abstract":false,"args":[{"name":"limiters","doc":null,"default_value":"","external_name":"limiters","restriction":"Limiter"}],"args_string":"(*limiters : Limiter)","source_link":null,"def":{"name":"new","args":[{"name":"limiters","doc":null,"default_value":"","external_name":"limiters","restriction":"Limiter"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MultiLimiter.new(*limiters)"}}],"instance_methods":[],"macros":[],"types":[{"html_id":"rate_limiter/RateLimiter/Limiter","path":"RateLimiter/Limiter.html","kind":"class","full_name":"RateLimiter::Limiter","name":"Limiter","abstract":false,"superclass":{"html_id":"rate_limiter/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rate_limiter/RateLimiter/LimiterLike","kind":"module","full_name":"RateLimiter::LimiterLike","name":"LimiterLike"},{"html_id":"rate_limiter/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rate_limiter/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"rate_limiter","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"rate_limiter/RateLimiter/LimiterLike","kind":"module","full_name":"RateLimiter::LimiterLike","name":"LimiterLike"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rate_limiter/RateLimiter","kind":"module","full_name":"RateLimiter","name":"RateLimiter"},"doc":"A rate limiter erogating tokens at the specified rate.\n\nThis is powered by the token bucket algorithm.","summary":"<p>A rate limiter erogating tokens at the specified rate.</p>","class_methods":[],"constructors":[{"id":"new(rate:Float64,max_burst:Int32=1)-class-method","html_id":"new(rate:Float64,max_burst:Int32=1)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"Float64"},{"name":"max_burst","doc":null,"default_value":"1","external_name":"max_burst","restriction":"Int32"}],"args_string":"(rate : Float64, max_burst : Int32 = <span class=\"n\">1</span>)","source_link":null,"def":{"name":"new","args":[{"name":"rate","doc":null,"default_value":"","external_name":"rate","restriction":"Float64"},{"name":"max_burst","doc":null,"default_value":"1","external_name":"max_burst","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(rate, max_burst)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"bucket:Channel(Nil)-instance-method","html_id":"bucket:Channel(Nil)-instance-method","name":"bucket","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Channel(Nil)","source_link":null,"def":{"name":"bucket","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bucket"}},{"id":"get(max_wait:Time::Span):Token|Timeout-instance-method","html_id":"get(max_wait:Time::Span):Token|Timeout-instance-method","name":"get","doc":"Returns a `Token` if one is available within `max_wait` time,\notherwise it returns a `Timeout`. Blocking.","summary":"<p>Returns a <code><a href=\"../RateLimiter/Token.html\">Token</a></code> if one is available within <code>max_wait</code> time, otherwise it returns a <code><a href=\"../RateLimiter/Timeout.html\">Timeout</a></code>.</p>","abstract":false,"args":[{"name":"max_wait","doc":null,"default_value":"","external_name":"max_wait","restriction":"Time::Span"}],"args_string":"(max_wait : Time::Span) : Token | Timeout","source_link":null,"def":{"name":"get","args":[{"name":"max_wait","doc":null,"default_value":"","external_name":"max_wait","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token | Timeout","visibility":"Public","body":"select\nwhen @bucket.receive\n  Token.new\nwhen timeout(max_wait)\n  Timeout.new\nend\n"}},{"id":"get:Token-instance-method","html_id":"get:Token-instance-method","name":"get","doc":"Returns a `Token` as soon as available. Blocking.","summary":"<p>Returns a <code><a href=\"../RateLimiter/Token.html\">Token</a></code> as soon as available.</p>","abstract":false,"args":[],"args_string":" : Token","source_link":null,"def":{"name":"get","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token","visibility":"Public","body":"@bucket.receive\nToken.new\n"}},{"id":"rate:Float64-instance-method","html_id":"rate:Float64-instance-method","name":"rate","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","source_link":null,"def":{"name":"rate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rate"}}],"macros":[],"types":[]},{"html_id":"rate_limiter/RateLimiter/LimiterLike","path":"RateLimiter/LimiterLike.html","kind":"module","full_name":"RateLimiter::LimiterLike","name":"LimiterLike","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"rate_limiter","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"rate_limiter/RateLimiter/Limiter","kind":"class","full_name":"RateLimiter::Limiter","name":"Limiter"},{"html_id":"rate_limiter/RateLimiter/MultiLimiter","kind":"class","full_name":"RateLimiter::MultiLimiter","name":"MultiLimiter"}],"namespace":{"html_id":"rate_limiter/RateLimiter","kind":"module","full_name":"RateLimiter","name":"RateLimiter"},"doc":"Defines the API for a rate-limiter-like instance.","summary":"<p>Defines the API for a rate-limiter-like instance.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"get(max_wait:Time::Span):Token|Timeout-instance-method","html_id":"get(max_wait:Time::Span):Token|Timeout-instance-method","name":"get","doc":"Returns a `Token` if one is available within `max_wait` time,\notherwise it returns a `Timeout`. Blocking.","summary":"<p>Returns a <code><a href=\"../RateLimiter/Token.html\">Token</a></code> if one is available within <code>max_wait</code> time, otherwise it returns a <code><a href=\"../RateLimiter/Timeout.html\">Timeout</a></code>.</p>","abstract":true,"args":[{"name":"max_wait","doc":null,"default_value":"","external_name":"max_wait","restriction":"Time::Span"}],"args_string":"(max_wait : Time::Span) : Token | Timeout","source_link":null,"def":{"name":"get","args":[{"name":"max_wait","doc":null,"default_value":"","external_name":"max_wait","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token | Timeout","visibility":"Public","body":""}},{"id":"get:Token-instance-method","html_id":"get:Token-instance-method","name":"get","doc":"Returns a `Token` as soon as available. Blocking.","summary":"<p>Returns a <code><a href=\"../RateLimiter/Token.html\">Token</a></code> as soon as available.</p>","abstract":true,"args":[],"args_string":" : Token","source_link":null,"def":{"name":"get","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token","visibility":"Public","body":""}},{"id":"get!(max_wait:Time::Span):Token-instance-method","html_id":"get!(max_wait:Time::Span):Token-instance-method","name":"get!","doc":"Raises `RateLimiter::Timeout` if no token is available after the given\ntime span. Blocking for at most a `max_wait` duration.","summary":"<p>Raises <code><a href=\"../RateLimiter/Timeout.html\">RateLimiter::Timeout</a></code> if no token is available after the given time span.</p>","abstract":false,"args":[{"name":"max_wait","doc":null,"default_value":"","external_name":"max_wait","restriction":"Time::Span"}],"args_string":"(max_wait : Time::Span) : Token","source_link":null,"def":{"name":"get!","args":[{"name":"max_wait","doc":null,"default_value":"","external_name":"max_wait","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token","visibility":"Public","body":"case res = get(max_wait: max_wait)\nin Token\n  res\nin Timeout\n  raise(res)\nend"}},{"id":"get!:Token-instance-method","html_id":"get!:Token-instance-method","name":"get!","doc":"Raises `RateLimiter::Timeout` if no token is available at call time. Non-blocking.","summary":"<p>Raises <code><a href=\"../RateLimiter/Timeout.html\">RateLimiter::Timeout</a></code> if no token is available at call time.</p>","abstract":false,"args":[],"args_string":" : Token","source_link":null,"def":{"name":"get!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token","visibility":"Public","body":"get!(max_wait: 0.seconds)"}},{"id":"get?:Token?-instance-method","html_id":"get?:Token?-instance-method","name":"get?","doc":"Returns `nil` if no token is available at call time. Non-blocking.","summary":"<p>Returns <code>nil</code> if no token is available at call time.</p>","abstract":false,"args":[],"args_string":" : Token?","source_link":null,"def":{"name":"get?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token | Nil","visibility":"Public","body":"case t = get(max_wait: 0.seconds)\nin Token\n  t\nin Timeout\n  nil\nend"}}],"macros":[],"types":[]},{"html_id":"rate_limiter/RateLimiter/MultiLimiter","path":"RateLimiter/MultiLimiter.html","kind":"class","full_name":"RateLimiter::MultiLimiter","name":"MultiLimiter","abstract":false,"superclass":{"html_id":"rate_limiter/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rate_limiter/RateLimiter/LimiterLike","kind":"module","full_name":"RateLimiter::LimiterLike","name":"LimiterLike"},{"html_id":"rate_limiter/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rate_limiter/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"rate_limiter","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"rate_limiter/RateLimiter/LimiterLike","kind":"module","full_name":"RateLimiter::LimiterLike","name":"LimiterLike"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rate_limiter/RateLimiter","kind":"module","full_name":"RateLimiter","name":"RateLimiter"},"doc":"A rate limiter combining multiple `Limiter`s.\n\nA MultiLimter tries to acquire tokens from limiters producing at the lowest rate first.\nThis mitigates the scenario where tokens are acquired and then wasted due to a single rate limiter timing out. ","summary":"<p>A rate limiter combining multiple <code><a href=\"../RateLimiter/Limiter.html\">Limiter</a></code>s.</p>","class_methods":[],"constructors":[{"id":"new(*rate_limiters:Limiter)-class-method","html_id":"new(*rate_limiters:Limiter)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"rate_limiters","doc":null,"default_value":"","external_name":"rate_limiters","restriction":"Limiter"}],"args_string":"(*rate_limiters : Limiter)","source_link":null,"def":{"name":"new","args":[{"name":"rate_limiters","doc":null,"default_value":"","external_name":"rate_limiters","restriction":"Limiter"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(*rate_limiters)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"get(max_wait:Time::Span):Token|Timeout-instance-method","html_id":"get(max_wait:Time::Span):Token|Timeout-instance-method","name":"get","doc":"Returns a `Token` if one is available within `max_wait` time,\notherwise it returns a `Timeout`. Blocking.","summary":"<p>Returns a <code><a href=\"../RateLimiter/Token.html\">Token</a></code> if one is available within <code>max_wait</code> time, otherwise it returns a <code><a href=\"../RateLimiter/Timeout.html\">Timeout</a></code>.</p>","abstract":false,"args":[{"name":"max_wait","doc":null,"default_value":"","external_name":"max_wait","restriction":"Time::Span"}],"args_string":"(max_wait : Time::Span) : Token | Timeout","source_link":null,"def":{"name":"get","args":[{"name":"max_wait","doc":null,"default_value":"","external_name":"max_wait","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token | Timeout","visibility":"Public","body":"_, remainder = @rate_limiters.map(&.bucket).reduce({Time.utc, max_wait}) do |__arg3, bucket|\n  started_at = __arg3[0]\n  time_left = __arg3[1]\n  select\nwhen bucket.receive\n    new_started_at = Time.utc\n    elapsed = new_started_at - started_at\n    {new_started_at, time_left - elapsed}\nwhen timeout(time_left)\n    break {nil, nil}\nend\n\nend\nremainder.nil? ? Timeout.new : Token.new\n"}},{"id":"get:Token-instance-method","html_id":"get:Token-instance-method","name":"get","doc":"Returns a `Token` as soon as available. Blocking.","summary":"<p>Returns a <code><a href=\"../RateLimiter/Token.html\">Token</a></code> as soon as available.</p>","abstract":false,"args":[],"args_string":" : Token","source_link":null,"def":{"name":"get","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Token","visibility":"Public","body":"@rate_limiters.each(&.get)\nToken.new\n"}}],"macros":[],"types":[]},{"html_id":"rate_limiter/RateLimiter/Timeout","path":"RateLimiter/Timeout.html","kind":"class","full_name":"RateLimiter::Timeout","name":"Timeout","abstract":false,"superclass":{"html_id":"rate_limiter/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"rate_limiter/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"rate_limiter/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rate_limiter/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"rate_limiter","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rate_limiter/RateLimiter","kind":"module","full_name":"RateLimiter","name":"RateLimiter"},"doc":"Returned or raised whenever a `Token` is not available within a given time constraint.","summary":"<p>Returned or raised whenever a <code><a href=\"../RateLimiter/Token.html\">Token</a></code> is not available within a given time constraint.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"rate_limiter/RateLimiter/Token","path":"RateLimiter/Token.html","kind":"class","full_name":"RateLimiter::Token","name":"Token","abstract":false,"superclass":{"html_id":"rate_limiter/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"rate_limiter/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"rate_limiter/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"rate_limiter","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"rate_limiter/RateLimiter","kind":"module","full_name":"RateLimiter","name":"RateLimiter"},"doc":"Represents the availability of capacity to perform operations in the current time bucket.","summary":"<p>Represents the availability of capacity to perform operations in the current time bucket.</p>","class_methods":[],"constructors":[{"id":"new(created_at=Time.utc)-class-method","html_id":"new(created_at=Time.utc)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"created_at","doc":null,"default_value":"Time.utc","external_name":"created_at","restriction":""}],"args_string":"(created_at = <span class=\"t\">Time</span>.utc)","source_link":null,"def":{"name":"new","args":[{"name":"created_at","doc":null,"default_value":"Time.utc","external_name":"created_at","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(created_at)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"created_at:Time-instance-method","html_id":"created_at:Time-instance-method","name":"created_at","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time","source_link":null,"def":{"name":"created_at","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"@created_at"}}],"macros":[],"types":[]}]}]}})